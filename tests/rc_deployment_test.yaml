suite: "test deployment for kyverno reports controller"
release:
  name: kyverno
templates:
- charts/kyverno/templates/reports-controller/deployment.yaml
tests:
- it: reports controller (local clusters) - local container resources
  values: &localValues
  - ../values-subchart-overrides.yaml
  - ../values-local.yaml
  asserts:
  - matchRegex:
      path: spec.template.spec.containers[?(@.name == "controller")].resources.limits.cpu
      pattern: "^0.*"
  - matchRegex:
      path: spec.template.spec.containers[?(@.name == "controller")].resources.limits.memory
      pattern: "^[1-9].*"
  - matchRegex:
      path: spec.template.spec.containers[?(@.name == "controller")].resources.requests.cpu
      pattern: "^0.*"
  - matchRegex:
      path: spec.template.spec.containers[?(@.name == "controller")].resources.requests.memory
      pattern: "^0.*"
  - matchSnapshot:
      path: spec.template.spec
- it: reports controller (all clusters) - non-local container resources
  values: &overridesValues
  - ../values-subchart-overrides.yaml
  asserts:
  - matchRegex:
      path: spec.template.spec.containers[?(@.name == "controller")].resources.limits.cpu
      pattern: "^[1-9].*"
  - matchRegex:
      path: spec.template.spec.containers[?(@.name == "controller")].resources.limits.memory
      pattern: "^[1-9].*"
  - matchRegex:
      path: spec.template.spec.containers[?(@.name == "controller")].resources.requests.cpu
      pattern: "^[1-9].*"
  - matchRegex:
      path: spec.template.spec.containers[?(@.name == "controller")].resources.requests.memory
      pattern: "^[1-9].*"
  - matchSnapshot:
      path: spec.template.spec
- it: reports controller (all clusters) - enabled policyExceptions feature
  values: *overridesValues
  asserts:
  - contains:
      path: spec.template.spec.containers[?(@.name == "controller")].args
      content:
        --enablePolicyException=true
  - matchSnapshot:
      path: spec.template.spec
- it: reports controller (all clusters) - subchart disabled policyExceptions feature
  asserts:
  - contains:
      path: spec.template.spec.containers[?(@.name == "controller")].args
      content:
        --enablePolicyException=false
  - matchSnapshot:
      path: spec.template.spec
- it: reports controller local cluster - logging custom verbosity
  values: *localValues
  asserts:
  - contains:
      path: spec.template.spec.containers[?(@.name == "controller")].args
      content:
        --v=3
  - matchSnapshot:
      path: spec.template.spec
- it: reports controller development cluster - logging custom verbosity
  values: *overridesValues
  asserts: &assertLoggingCustomVerbosity
  - contains:
      path: spec.template.spec.containers[?(@.name == "controller")].args
      content:
        --v=-1
  - matchSnapshot:
      path: spec.template.spec
- it: reports controller production cluster - logging custom verbosity
  values:
  - ../values-subchart-overrides.yaml
  - ../values-production.yaml
  asserts: *assertLoggingCustomVerbosity
- it: reports controller - logging default verbosity
  asserts:
  - contains:
      path: spec.template.spec.containers[?(@.name == "controller")].args
      content:
        --v=2
  - matchSnapshot:
      path: spec.template.spec
- it: reports controller - logging default text format
  asserts: &assertLoggingTextFormat
  - contains:
      path: spec.template.spec.containers[?(@.name == "controller")].args
      content:
        --loggingFormat=text
  - matchSnapshot:
      path: spec.template.spec
- it: reports controller local cluster - logging text format
  values: *localValues
  asserts: *assertLoggingTextFormat
- it: reports controller development cluster - logging text format
  values: *overridesValues
  asserts: *assertLoggingTextFormat
- it: reports controller production cluster - logging text format
  values:
  - ../values-subchart-overrides.yaml
  - ../values-production.yaml
  asserts: *assertLoggingCustomVerbosity
- it: reports controller - logging default verbosity
  asserts: *assertLoggingTextFormat
